# ======================================================
#  MedGuard-X Experiment Harness (Baselines â†’ Full)
# ======================================================

import json, pandas as pd, matplotlib.pyplot as plt

# Helper: run experiment + metrics
def run_and_eval(name, cfg, outdir):
    print(f"\n===========================")
    print(f"â–¶ Running {name.upper()}...")
    df = run_experiment(cfg, out_dir=outdir)
    df = compute_rdc_scores(df)
    df.to_csv(f"{outdir}/results_with_ja.csv", index=False)
    m = compute_metrics(df)

    print(f"{name} metrics:", json.dumps(m, indent=2, default=safe_json))
    return name, m

# Helper: safe float conversion
def safe_json(obj):
    if isinstance(obj, (np.float32, np.float64)):
        return float(obj)
    if isinstance(obj, (np.int32, np.int64)):
        return int(obj)
    raise TypeError(f"Type {type(obj)} not serializable")




# --- Config variants ---
baseline_cfg = {
    **config,
    "use_consensus": False,
    "consensus_n": 1,
    "use_test_safety": False,
    "use_rx_safety": False,
    "use_ddi_check": False,
}

safety_cfg = {
    **config,
    "use_consensus": False,
    "consensus_n": 1,
    "use_test_safety": True,
    "use_rx_safety": True,
    "use_ddi_check": True,
}

consensus_cfg = {
    **config,
    "use_consensus": True,
    "consensus_n": 3,
    "use_test_safety": False,
    "use_rx_safety": False,
    "use_ddi_check": False,
}

trust_cfg = {
    **config,
    "use_consensus": True,
    "consensus_n": 3,
    "use_test_safety": True,
    "use_rx_safety": True,
    "use_ddi_check": True,
}

# --- Run all experiments ---
experiments = [
    ("baseline", baseline_cfg, "experiments_baseline"),
    ("safety", safety_cfg, "experiments_safety"),
    ("consensus", consensus_cfg, "experiments_consensus"),
    ("trust", trust_cfg, "experiments_trust"),
]

results = []
for name, cfg, folder in experiments:
    nm, m = run_and_eval(name, cfg, folder)
    results.append({"run": nm, **m})

df_summary = pd.DataFrame(results)
df_summary.to_csv("experiment_summary_all.csv", index=False)

print("\nâœ… All experiments complete!\n")
print(df_summary)

# --- LaTeX Table ---
latex_table = df_summary.to_latex(
    index=False,
    float_format="%.2f",
    caption="Performance comparison across MedGuard-X variants.",
    label="tab:medguardx_results"
)
with open("experiment_summary_all.tex", "w") as f:
    f.write(latex_table)
print("\nðŸ“„ LaTeX table saved as 'experiment_summary_all.tex'.")

# --- Plot summary ---
plt.figure(figsize=(7,4))
plt.plot(df_summary["run"], df_summary["accuracy_%"], marker="o", label="Accuracy")
plt.plot(df_summary["run"], df_summary["trust_index"], marker="s", label="Trust Index")
plt.title("Performance across MedGuard-X variants")
plt.xlabel("Configuration")
plt.ylabel("%")
plt.legend()
plt.grid(alpha=0.3)
plt.tight_layout()
plt.savefig("experiment_summary_plot.png")
plt.show()

print("ðŸ“Š Saved plot: experiment_summary_plot.png")
