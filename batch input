# ============================
# Simple hard-coded plotting
# ============================
import numpy as np
import matplotlib.pyplot as plt

# ------------------------------------------------------
# 1) FILL THESE WITH YOUR SCORES
# ------------------------------------------------------
# Define your tasks and languages
TASKS = ["QnA", "Summary (Text)", "Summary (JSON)"]
LANGUAGES = ["Marathi","Kannada","Gujarati","English","Telugu","Tamil","Bangla","Hindi","Assamese"]

# Average scores per task (put your final numbers here)
AVG = {
    "F1":         [0.46, 0.73, 0.30],   # [QnA, Summary(Text), Summary(JSON)]
    "BERTScore":  [0.84, 0.85, 0.83],
    "COMET":      [0.44, 0.76, 0.71],
}

# Language-wise scores for each task and metric
# Fill each with a list matching the LANGUAGES order above (len = len(LANGUAGES))
LANGWISE = {
    "QnA": {
        "F1":        [0.228,0.471,0.496,0.674,0.345,0.442,0.334,0.618,0.533],
        "BERTScore": [0.831,0.845,0.839,0.852,0.584,0.667,0.388,0.852,0.823],  # <- put real BERT f1 if you have them
        "COMET":     [0.187,0.437,0.442,0.706,0.367,0.406,0.312,0.369,0.395],  # <- replace with your COMET
    },
    "Summary (Text)": {
        "F1":        [0.668,0.747,0.757,0.707,0.743,0.774,0.719,0.714,0.757],
        "BERTScore": [0.237,0.845,0.839,0.852,0.584,0.83 ,0.388,0.852,0.823],  # replace
        "COMET":     [0.187,0.436,0.442,0.484,0.446,0.462,0.462,0.478,0.459],  # replace
    },
    "Summary (JSON)": {
        "F1":        [0.302,0.272,0.269,0.336,0.263,0.297,0.290,0.344,0.288],  # example
        "BERTScore": [0.811,0.825,0.835,0.838,0.822,0.834,0.826,0.832,0.828],  # replace
        "COMET":     [0.711,0.759,0.764,0.772,0.771,0.769,0.741,0.768,0.741],  # replace
    }
}

# ------------------------------------------------------
# 2) PLOTTING HELPERS
# ------------------------------------------------------
def bar_with_labels(x, vals, width, offset, label):
    """Draw a bar group and add value labels."""
    rects = plt.bar(x + offset, vals, width, label=label)
    for r in rects:
        h = r.get_height()
        if np.isfinite(h):
            plt.text(r.get_x() + r.get_width()/2, h + 0.005, f"{h:.3f}",
                     ha="center", va="bottom", fontsize=8)

# ------------------------------------------------------
# 3) PLOT 1: Average score per task (F1, BERT, COMET)
# ------------------------------------------------------
plt.figure(figsize=(8, 5))
x = np.arange(len(TASKS))
w = 0.25

bar_with_labels(x, AVG["F1"],        w, -w, "F1")
bar_with_labels(x, AVG["BERTScore"], w,  0, "BERTScore")
bar_with_labels(x, AVG["COMET"],     w,  w, "COMET")

plt.xticks(x, TASKS, rotation=0)
plt.ylabel("Average Score")
plt.ylim(0, 1)
plt.title("Average Performance per Task")
plt.legend(frameon=False)
plt.tight_layout()
plt.savefig("avg_per_task.png", dpi=300)
plt.show()

# ------------------------------------------------------
# 4) PLOT 2: Language-wise plots for each task
#     (one PNG per task with F1/BERT/COMET grouped bars)
# ------------------------------------------------------
for task in TASKS:
    plt.figure(figsize=(11, 5))
    x = np.arange(len(LANGUAGES))
    w = 0.25

    bar_with_labels(x, LANGWISE[task]["F1"],        w, -w, "F1")
    bar_with_labels(x, LANGWISE[task]["BERTScore"], w,  0, "BERTScore")
    bar_with_labels(x, LANGWISE[task]["COMET"],     w,  w, "COMET")

    plt.xticks(x, LANGUAGES, rotation=35, ha="right")
    plt.ylabel("Score")
    plt.ylim(0, 1)
    plt.title(f"Language-wise Performance â€” {task}")
    plt.legend(frameon=False)
    plt.tight_layout()
    safe_name = task.lower().replace(" ", "_").replace("(", "").replace(")", "")
    plt.savefig(f"langwise_{safe_name}.png", dpi=300)
    plt.show()
