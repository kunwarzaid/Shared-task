import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# ============================================================
# 1Ô∏è‚É£ LOAD & CLEAN CSV (robust for multi-row header)
# ============================================================
csv_path = "Shared_task_results(Zaid).csv"

# Step 1: read first few rows to detect where "Language" appears
raw_preview = pd.read_csv(csv_path, nrows=5, header=None)
print("üîç Header preview (first 5 rows):")
print(raw_preview.head())

lang_row_idx = raw_preview.apply(
    lambda row: row.astype(str).str.contains("Language", case=False, na=False)
).any(axis=1)
lang_row = list(np.where(lang_row_idx)[0])
if not lang_row:
    raise ValueError("‚ùå Could not find 'Language' in the first 5 rows.")
lang_header_row = lang_row[0]
print(f"‚úÖ Detected header row containing 'Language': Row {lang_header_row}")

# Step 2: use all header rows up to the Language row
header_rows = list(range(lang_header_row + 1))
df = pd.read_csv(csv_path, header=header_rows)

# Step 3: flatten multi-index columns
if isinstance(df.columns, pd.MultiIndex):
    df.columns = [
        "_".join(
            [str(x).strip() for x in col if str(x).lower() != "nan" and x.strip() != ""]
        )
        for col in df.columns
    ]
else:
    df.columns = df.columns.astype(str)

df.columns = [c.replace(" ", "_").replace("__", "_") for c in df.columns]

# Step 4: detect or assume Language column
lang_candidates = [c for c in df.columns if "language" in c.lower()]
if not lang_candidates:
    lang_col = df.columns[0]
    print(f"‚ö†Ô∏è 'Language' not found by name, assuming first column '{lang_col}' is Language.")
else:
    lang_col = lang_candidates[0]

df.rename(columns={lang_col: "Language"}, inplace=True)

print("‚úÖ Flattened columns detected:")
print(df.columns[:12])
print(f"‚úÖ Using '{lang_col}' as Language column.\n")
print("üîπ Data preview:\n", df.head(3))

# ============================================================
# 2Ô∏è‚É£ DEFINE METRICS & TASK GROUPS
# ============================================================
metrics = ["f1", "bertscore_f1", "cometscore"]

tasks = {
    "QnA": [c for c in df.columns if c.startswith("qna_")],
    "Summary (Text)": [c for c in df.columns if c.startswith("summary_text_")],
    "Summary (JSON)": [c for c in df.columns if c.startswith("summary_knv_")],
}

# ============================================================
# 3Ô∏è‚É£ COMPUTE TASK-WISE AVERAGES (robust)
# ============================================================
task_avgs = {}
available_metrics = set()

for task_name, cols in tasks.items():
    task_avgs[task_name] = {}
    for m in metrics:
        m_cols = [c for c in cols if m in c.lower()]
        if m_cols:
            avg_val = df[m_cols].mean(axis=1).mean()
            task_avgs[task_name][m] = avg_val
            available_metrics.add(m)
        else:
            task_avgs[task_name][m] = np.nan

print("\n‚úÖ Available metrics found:", available_metrics)
print("‚úÖ Task-wise averages computed:")
for t, vals in task_avgs.items():
    print(f"  {t}: " + ", ".join([f"{m}={vals[m]:.3f}" if not np.isnan(vals[m]) else f"{m}=N/A" for m in metrics]))

# ============================================================
# 4Ô∏è‚É£ PLOT TASK-WISE PERFORMANCE (auto-adjusted)
# ============================================================
task_names = list(task_avgs.keys())
metric_colors = {
    "f1": "#4e79a7",
    "bertscore_f1": "#59a14f",
    "cometscore": "#e15759",
}
x = np.arange(len(task_names))
width = 0.25

plt.figure(figsize=(8, 5))
for i, m in enumerate(metrics):
    if m in available_metrics:
        vals = [task_avgs[t][m] for t in task_names]
        plt.bar(x + (i - 1) * width, vals, width, label=m.replace("_f1", "").upper(), color=metric_colors[m])

plt.ylabel("Score", fontsize=12)
plt.xticks(x, task_names, fontsize=11)
plt.ylim(0, 1)
plt.title("Average Performance Across Tasks", fontsize=14, weight="bold")
plt.legend(frameon=False, loc="lower right")
plt.tight_layout()
plt.savefig("qwen_taskwise_performance_fixed.png", dpi=300)
plt.show()

# ============================================================
# 5Ô∏è‚É£ LANGUAGE-WISE PERFORMANCE
# ============================================================
language_scores = df[["Language"]].copy()
lang_metrics_available = set()

for m in metrics:
    cols = [c for c in df.columns if m in c.lower()]
    if cols:
        language_scores[m] = df[cols].mean(axis=1)
        lang_metrics_available.add(m)
    else:
        language_scores[m] = np.nan

languages = language_scores["Language"].tolist()
x = np.arange(len(languages))
width = 0.25

plt.figure(figsize=(10, 6))
for i, m in enumerate(metrics):
    if m in lang_metrics_available:
        vals = language_scores[m].tolist()
        plt.bar(x + (i - 1) * width, vals, width, label=m.replace("_f1", "").upper(), color=metric_colors[m])

plt.ylabel("Score", fontsize=12)
plt.xticks(x, languages, rotation=45, ha="right", fontsize=10)
plt.ylim(0, 1)
plt.title("Language-wise Performance Across Metrics", fontsize=14, weight="bold")
plt.legend(frameon=False, loc="upper right")
plt.tight_layout()
plt.savefig("qwen_languagewise_performance_fixed.png", dpi=300)
plt.show()

# ============================================================
# 6Ô∏è‚É£ LATEX TABLE + AVERAGES
# ============================================================
f1_vals = language_scores["f1"].tolist()
bert_vals = language_scores["bertscore_f1"].tolist()
comet_vals = language_scores["cometscore"].tolist()

avg_f1 = np.nanmean(f1_vals)
avg_bert = np.nanmean(bert_vals)
avg_comet = np.nanmean(comet_vals)

print("\n‚úÖ Overall Averages:")
print(f"  F1: {avg_f1:.3f} | BERTScore: {avg_bert:.3f} | COMET: {avg_comet:.3f}")

best_f1_lang = languages[np.nanargmax(f1_vals)]
best_bert_lang = languages[np.nanargmax(bert_vals)]
best_comet_lang = languages[np.nanargmax(comet_vals)]

latex_table = "\\begin{table}[h]\n\\centering\n\\small\n"
latex_table += "\\begin{tabular}{lccc}\n\\toprule\n"
latex_table += "Language & F1 & BERTScore & COMET \\\\\n\\midrule\n"

for lang, f, b, c in zip(languages, f1_vals, bert_vals, comet_vals):
    f_str = f"\\textbf{{{f:.3f}}}" if lang == best_f1_lang else f"{f:.3f}"
    b_str = f"\\textbf{{{b:.3f}}}" if lang == best_bert_lang else f"{b:.3f}"
    c_str = f"\\textbf{{{c:.3f}}}" if lang == best_comet_lang else f"{c:.3f}"
    latex_table += f"{lang} & {f_str} & {b_str} & {c_str} \\\\\n"

latex_table += "\\midrule\n"
latex_table += f"\\textbf{{Average}} & {avg_f1:.3f} & {avg_bert:.3f} & {avg_comet:.3f} \\\\\n"
latex_table += "\\bottomrule\n\\end{tabular}\n"
latex_table += "\\caption{{Language-wise performance of the Qwen-based system across key metrics. Best values are bolded.}}\n"
latex_table += "\\label{{tab:language_results}}\n\\end{table}\n"

with open("language_results_table.tex", "w", encoding="utf-8") as f:
    f.write(latex_table)

print("\nüìÑ LaTeX table saved as language_results_table.tex")
print("‚úÖ Plots saved:")
print(" - qwen_taskwise_performance_fixed.png")
print(" - qwen_languagewise_performance_fixed.png")
