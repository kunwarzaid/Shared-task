import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# ============================================================
# 1Ô∏è‚É£ LOAD & CLEAN CSV
# ============================================================
csv_path = "Shared_task_results(Zaid).csv"

# Read first few rows to inspect header structure
preview = pd.read_csv(csv_path, nrows=3, header=None)
print("üîç Header preview:")
print(preview.head(3))

# Re-read with first two rows as multi-index headers
df = pd.read_csv(csv_path, header=[0, 1])

# Flatten multi-level columns ("qna", "f1") ‚Üí "qna_f1"
df.columns = [
    "_".join([str(x).strip() for x in col if str(x).lower() != "nan" and x.strip() != ""])
    for col in df.columns
]
df.columns = [c.replace(" ", "_") for c in df.columns]

print("‚úÖ Flattened columns detected:")
print(df.columns[:12])

# Detect language column
lang_col = [c for c in df.columns if "language" in c.lower()][0]
df.rename(columns={lang_col: "Language"}, inplace=True)

print(f"‚úÖ Using '{lang_col}' as Language column.\n")
print("üîπ Data preview:\n", df.head(3))

# ============================================================
# 2Ô∏è‚É£ DEFINE METRICS AND TASKS
# ============================================================
metrics = ["f1", "bertscore_f1", "cometscore"]

tasks = {
    "QnA": [c for c in df.columns if c.startswith("qna_")],
    "Summary (Text)": [c for c in df.columns if c.startswith("summary_text_")],
    "Summary (JSON)": [c for c in df.columns if c.startswith("summary_knv_")],
}

# ============================================================
# 3Ô∏è‚É£ COMPUTE TASK-WISE AVERAGES
# ============================================================
task_avgs = {}
for task_name, cols in tasks.items():
    task_avgs[task_name] = {}
    for m in metrics:
        m_cols = [c for c in cols if m in c]
        if m_cols:
            task_avgs[task_name][m] = df[m_cols].mean(axis=1).mean()
        else:
            task_avgs[task_name][m] = np.nan

# ============================================================
# 4Ô∏è‚É£ PLOT TASK-WISE PERFORMANCE
# ============================================================
task_names = list(task_avgs.keys())
f1_scores = [task_avgs[t]["f1"] for t in task_names]
bert_scores = [task_avgs[t]["bertscore_f1"] for t in task_names]
comet_scores = [task_avgs[t]["cometscore"] for t in task_names]

x = np.arange(len(task_names))
width = 0.25

plt.figure(figsize=(8, 5))
plt.bar(x - width, f1_scores, width, label="F1", color="#4e79a7")
plt.bar(x, bert_scores, width, label="BERTScore", color="#59a14f")
plt.bar(x + width, comet_scores, width, label="COMET", color="#e15759")
plt.ylabel("Score", fontsize=12)
plt.xticks(x, task_names, fontsize=11)
plt.ylim(0, 1)
plt.title("Average Performance Across Tasks", fontsize=14, weight="bold")
plt.legend(frameon=False, loc="lower right")
plt.tight_layout()
plt.savefig("qwen_taskwise_performance_auto.png", dpi=300)
plt.show()

# ============================================================
# 5Ô∏è‚É£ COMPUTE LANGUAGE-WISE AVERAGES
# ============================================================
language_scores = df[["Language"]].copy()
for m in metrics:
    cols = [c for c in df.columns if m in c]
    language_scores[m] = df[cols].mean(axis=1)

languages = language_scores["Language"].tolist()
f1_vals = language_scores["f1"].tolist()
bert_vals = language_scores["bertscore_f1"].tolist()
comet_vals = language_scores["cometscore"].tolist()

# ============================================================
# 6Ô∏è‚É£ PLOT LANGUAGE-WISE PERFORMANCE
# ============================================================
x = np.arange(len(languages))
plt.figure(figsize=(10, 6))
plt.bar(x - width, f1_vals, width, label="F1", color="#4e79a7")
plt.bar(x, bert_vals, width, label="BERTScore", color="#59a14f")
plt.bar(x + width, comet_vals, width, label="COMET", color="#e15759")
plt.ylabel("Score", fontsize=12)
plt.xticks(x, languages, rotation=45, ha="right", fontsize=10)
plt.ylim(0, 1)
plt.title("Language-wise Performance Across Metrics", fontsize=14, weight="bold")
plt.legend(frameon=False, loc="upper right")
plt.tight_layout()
plt.savefig("qwen_languagewise_performance_auto.png", dpi=300)
plt.show()

# ============================================================
# 7Ô∏è‚É£ COMPUTE OVERALL AVERAGES + LATEX TABLE
# ============================================================
avg_f1 = np.nanmean(f1_vals)
avg_bert = np.nanmean(bert_vals)
avg_comet = np.nanmean(comet_vals)

print("\n‚úÖ Overall Averages:")
print(f"  F1: {avg_f1:.3f} | BERTScore: {avg_bert:.3f} | COMET: {avg_comet:.3f}")

# LaTeX table (for ACL short paper)
latex_table = "\\begin{table}[h]\n\\centering\n\\small\n"
latex_table += "\\begin{tabular}{lccc}\n\\toprule\n"
latex_table += "Language & F1 & BERTScore & COMET \\\\\n\\midrule\n"
for lang, f, b, c in zip(languages, f1_vals, bert_vals, comet_vals):
    latex_table += f"{lang} & {f:.3f} & {b:.3f} & {c:.3f} \\\\\n"
latex_table += "\\midrule\n"
latex_table += f"\\textbf{{Average}} & {avg_f1:.3f} & {avg_bert:.3f} & {avg_comet:.3f} \\\\\n"
latex_table += "\\bottomrule\n\\end{tabular}\n"
latex_table += "\\caption{{Language-wise performance of Qwen-based system across key metrics.}}\n"
latex_table += "\\label{{tab:language_results}}\n\\end{table}\n"

with open("language_results_table.tex", "w", encoding="utf-8") as f:
    f.write(latex_table)

print("\nüìÑ LaTeX table saved as language_results_table.tex")
print("‚úÖ Plots saved:")
print(" - qwen_taskwise_performance_auto.png")
print(" - qwen_languagewise_performance_auto.png")
