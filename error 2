�The tokenizer has new PAD/BOS/EOS tokens that differ from the model config and generation config. The model config and generation config were aligned accordingly, being updated with the tokenizer's values. Updated tokens: {'eos_token_id': 1}.

_🔍 Checking model trainable parameters...
trainable params: 226,304 || all params: 1,000,112,256 || trainable%: 0.02262785988696053
🧪 Testing one forward pass to confirm loss.requires_grad...
➡️ Sample loss: 3.475123405456543  | requires_grad: True
🚀 Starting fine-tuning (with resumable checkpoints)...
✨ Starting fresh training run...

  0%|          | 0/5584 [00:00<?, ?it/s]
�/usr/local/lib/python3.10/dist-packages/torch/utils/checkpoint.py:90: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn(

~Traceback (most recent call last):
  File "/workspace/table-to-text-flan-t5/ftune_stask_less_param.py", line 344, in <module>

r    trainer.train()
  File "/usr/local/lib/python3.10/dist-packages/transformers/trainer.py", line 2325, in train

�    return inner_training_loop(
  File "/usr/local/lib/python3.10/dist-packages/transformers/trainer.py", line 2674, in _inner_training_loop

�    tr_loss_step = self.training_step(model, inputs, num_items_in_batch)
  File "/usr/local/lib/python3.10/dist-packages/transformers/trainer.py", line 4071, in training_step

�    self.accelerator.backward(loss, **kwargs)
  File "/usr/local/lib/python3.10/dist-packages/accelerate/accelerator.py", line 2192, in backward

�    self.scaler.scale(loss).backward(**kwargs)
  File "/usr/local/lib/python3.10/dist-packages/torch/_tensor.py", line 522, in backward

�    torch.autograd.backward(
  File "/usr/local/lib/python3.10/dist-packages/torch/autograd/__init__.py", line 266, in backward

�    Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
RuntimeError: element 0 of tensors does not require grad and does not have a grad_fn

  0%|          | 0/5584 [00:00<?, ?it/s]

removing /jobs/275688
