def build_json_prompt(dialogue, fewshot_dlg, fewshot_json):
    """Builds a stronger JSON extraction prompt."""
    example = ""
    if fewshot_dlg and fewshot_json:
        example = f"### Example Dialogue:\n{fewshot_dlg}\n\n### Example JSON:\n{fewshot_json}\n\n"
    schema = json.dumps(JSON_TEMPLATE, indent=2, ensure_ascii=False)
    return (
        "You are a clinical information extraction system.\n"
        "Your task is to extract structured information from doctor–patient dialogues.\n"
        "Follow the example format and return ONLY valid JSON enclosed in braces `{}` — no extra text, explanation, or markdown.\n\n"
        f"{example}"
        f"### New Dialogue:\n{dialogue}\n\n"
        f"JSON schema (for reference only):\n{schema}\n\n"
        "### JSON:"
    )


def try_extract_json(text):
    """More tolerant JSON extractor with minor repair heuristics."""
    text = text.strip()
    text = text.replace("“", '"').replace("”", '"').replace("‘", "'").replace("’", "'")
    # Remove markdown artifacts
    text = re.sub(r"```(json)?", "", text)
    # Extract JSON-like portion
    start, end = text.find("{"), text.rfind("}")
    if start != -1 and end != -1:
        snippet = text[start:end + 1]
        try:
            return json.loads(snippet)
        except json.JSONDecodeError:
            try:
                # Try minor repair: add closing braces, remove trailing commas
                snippet = re.sub(r",\s*}", "}", snippet)
                snippet = re.sub(r",\s*]", "]", snippet)
                return json.loads(snippet)
            except Exception:
                pass
    # Final fallback: look for key patterns
    matches = re.findall(r'"([^"]+)":\s*"([^"]+)"', text)
    if matches:
        return {k: v for k, v in matches}
    return None
