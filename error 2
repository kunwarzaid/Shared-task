import os
import json
from pathlib import Path
from typing import List, Dict
import torch
import sys, importlib, inspect, traceback

# =============================================================================
# ----------------------------- ACCELERATE COMPAT SHIM -------------------------
# =============================================================================
def accelerate_compat_shim():
    try:
        if "accelerate" in sys.modules:
            accelerate = sys.modules["accelerate"]
        else:
            import accelerate

        ver = getattr(accelerate, "__version__", "unknown")
        print(f"[shim] accelerate imported from: {getattr(accelerate, '__file__', 'unknown')}")
        print(f"[shim] accelerate.__version__ = {ver}")

        try:
            sig = inspect.signature(accelerate.Accelerator.unwrap_model)
            print(f"[shim] unwrap_model signature: {sig}")
        except Exception as e:
            print("[shim] Could not inspect unwrap_model signature:", e)
            sig = None

        needs_shim = True
        if sig is not None:
            params = list(sig.parameters.keys())
            if "keep_torch_compile" in params:
                needs_shim = False

        if needs_shim:
            print("[shim] Applying compatibility shim to Accelerator.unwrap_model() ...")
            _orig_unwrap = accelerate.Accelerator.unwrap_model

            def _unwrap_compat(self, model, *args, **kwargs):
                try:
                    return _orig_unwrap(self, model, *args, **kwargs)
                except TypeError:
                    kwargs.pop("keep_torch_compile", None)
                    return _orig_unwrap(self, model, *args, **kwargs)
                except Exception:
                    kwargs.pop("keep_torch_compile", None)
                    return _orig_unwrap(self, model)

            accelerate.Accelerator.unwrap_model = _unwrap_compat
            print("[shim] shim applied successfully.")
        else:
            print("[shim] No shim needed.")
    except Exception as e:
        print("[shim] ERROR while applying accelerate shim:", e)
        print(traceback.format_exc())

accelerate_compat_shim()
# =============================================================================


# ------------------------------ IMPORTS --------------------------------------
from datasets import Dataset
from transformers import (
    AutoTokenizer,
    AutoModelForCausalLM,
    Trainer,
    TrainingArguments,
    DataCollatorForLanguageModeling
)
from peft import LoraConfig, get_peft_model
from transformers import BitsAndBytesConfig


# ------------------------------ PATHS ----------------------------------------
DATA_DIR = "/workspace/data/KZ_2117574/SharedTask_NLPAI4Health_Train&dev_set"
OUTPUT_DIR = "/workspace/data/KZ_2117574/fast/gemma1b_qlora_multilingual_finetune"
BASE_MODEL = "/workspace/data/KZ_2117574/gemma_3_1b"


# ------------------------------ UTILITIES ------------------------------------
def read_jsonl(path):
    """Read JSONL file safely, skip broken lines."""
    records = []
    with open(path, "r", encoding="utf-8") as f:
        for line in f:
            line = line.strip()
            if not line:
                continue
            try:
                records.append(json.loads(line))
            except json.JSONDecodeError:
                continue
    return records


def make_examples(root):
    """Load Summarization + QnA data into text-label pairs."""
    examples = []
    for lang in os.listdir(root):
        lang_path = os.path.join(root, lang)
        if not os.path.isdir(lang_path):
            continue

        dlg_dir = os.path.join(lang_path, "Dialogues")
        sum_dir = os.path.join(lang_path, "Summary_Text")
        qna_dir = os.path.join(lang_path, "QnA")

        # --- Summarization ---
        if os.path.isdir(dlg_dir) and os.path.isdir(sum_dir):
            for fn in os.listdir(dlg_dir):
                if not fn.endswith(".jsonl"):
                    continue
                dlg_path = os.path.join(dlg_dir, fn)
                dialogues = []

                for x in read_jsonl(dlg_path):
                    try:
                        if isinstance(x, dict):
                            val = x.get("dialogue", "")
                        else:
                            val = str(x)
                        if isinstance(val, list):
                            val = " ".join(map(str, val))
                        dialogues.append(str(val))
                    except Exception as e:
                        continue

                dialogue_text = "\n".join(dialogues).strip()
                if not dialogue_text:
                    continue

                sum_path = os.path.join(sum_dir, fn.replace(".jsonl", "_summary.txt"))
                if os.path.exists(sum_path):
                    try:
                        with open(sum_path, "r", encoding="utf-8") as f:
                            summary = f.read().strip()
                        if summary:
                            prompt = (
                                f"Summarize the following doctor‚Äìpatient dialogue in English:\n"
                                f"{dialogue_text}\nSummary:"
                            )
                            examples.append({"text": prompt, "labels": summary})
                    except Exception:
                        continue

        # --- QnA ---
        if os.path.isdir(qna_dir):
            for fn in os.listdir(qna_dir):
                if not fn.endswith(".json"):
                    continue
                qna_path = os.path.join(qna_dir, fn)
                try:
                    with open(qna_path, "r", encoding="utf-8") as f:
                        data = json.load(f)
                except Exception as e:
                    print(f"‚ö†Ô∏è Skipped malformed QnA file {fn}: {e}")
                    continue

                if not isinstance(data, dict):
                    continue

                qs = data.get("questions", [])
                if not isinstance(qs, list):
                    continue

                for qa in qs:
                    if not isinstance(qa, dict):
                        continue
                    q = qa.get("question", "")
                    a = qa.get("answer", "")
                    if not q or not a:
                        continue
                    prompt = (
                        "Answer the following question in the same language as the dialogue:\n"
                        f"Question: {q}\nAnswer:"
                    )
                    examples.append({"text": prompt, "labels": a})
    print(f"‚úÖ Loaded {len(examples)} examples from {root}")
    return examples


# ------------------------------ LOAD DATA ------------------------------------
train_data = make_examples(os.path.join(DATA_DIR, "train"))
dev_data = make_examples(os.path.join(DATA_DIR, "dev"))
print(f"‚úÖ Loaded {len(train_data)} train and {len(dev_data)} dev examples.")


# ------------------------------ MODEL + QLoRA --------------------------------
bnb_cfg = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_use_double_quant=True,
    bnb_4bit_quant_type="nf4",
    bnb_4bit_compute_dtype=torch.bfloat16
)

tokenizer = AutoTokenizer.from_pretrained(BASE_MODEL, use_fast=True)
if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

model = AutoModelForCausalLM.from_pretrained(
    BASE_MODEL,
    device_map="auto",
    quantization_config=bnb_cfg
)

lora_cfg = LoraConfig(
    r=8,
    lora_alpha=32,
    target_modules=["q_proj", "v_proj"],
    lora_dropout=0.05,
    task_type="CAUSAL_LM"
)
model = get_peft_model(model, lora_cfg)
model.print_trainable_parameters()


# ------------------------------ TOKENIZATION ---------------------------------
def tokenize_fn(examples):
    """Concatenate input and label text for causal LM."""
    full_texts = [f"{x.strip()} {y.strip()}" for x, y in zip(examples["text"], examples["labels"])]
    tokenized = tokenizer(full_texts, truncation=True, max_length=1024, padding=False)
    tokenized["labels"] = tokenized["input_ids"].copy()
    return tokenized


train_ds = Dataset.from_list(train_data).map(
    tokenize_fn, batched=True, num_proc=4, remove_columns=["text", "labels"]
)
dev_ds = Dataset.from_list(dev_data).map(
    tokenize_fn, batched=True, num_proc=4, remove_columns=["text", "labels"]
)

data_collator = DataCollatorForLanguageModeling(tokenizer, mlm=False)


# ------------------------------ TRAINING -------------------------------------
args = TrainingArguments(
    output_dir=OUTPUT_DIR,
    per_device_train_batch_size=1,
    gradient_accumulation_steps=8,
    num_train_epochs=2,
    learning_rate=2e-4,
    fp16=True,
    evaluation_strategy="epoch",
    save_strategy="epoch",
    logging_steps=20,
    report_to="none"
)

trainer = Trainer(
    model=model,
    args=args,
    train_dataset=train_ds,
    eval_dataset=dev_ds,
    data_collator=data_collator,
)

print("üöÄ Starting fine-tuning...")
trainer.train()

trainer.save_model(OUTPUT_DIR)
tokenizer.save_pretrained(OUTPUT_DIR)
print(f"‚úÖ Training complete! Model saved to: {OUTPUT_DIR}")
