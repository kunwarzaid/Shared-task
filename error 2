import os, json, time, random
from pathlib import Path
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM, BitsAndBytesConfig
from peft import PeftModel

# ===============================================================
# PATHS
# ===============================================================
BASE_MODEL = "/workspace/data/KZ_2117574/gemma_3_1b"
ADAPTER_DIR = "/workspace/data/KZ_2117574/less_para_gemma/run_gemma1b_lora"
TRAIN_DIR = "/workspace/data/KZ_2117574/SharedTask_NLPAI4Health_Train&dev_set/train"
TEST_DIR = "/workspace/data/KZ_2117574/test_data_release/test_data_release"
OUTPUT_DIR = "/workspace/data/KZ_2117574/SharedTask_Inference_Output_Fixed"

# ===============================================================
# PARAMETERS
# ===============================================================
SEED = 42
MODEL_MAX = 4096
INPUT_LIMIT = 2048  # prevent context overflow

MAX_NEW_TOKENS_SUMMARY = 256
MAX_NEW_TOKENS_JSON = 400
MAX_NEW_TOKENS_QNA = 200

TEMPERATURE = 0.5
TOP_P = 0.9
REP_PENALTY = 1.05

# ===============================================================
# LANGUAGE MAP
# ===============================================================
LANG_HINTS = {
    "English": "English", "Hindi": "Hindi", "Gujarati": "Gujarati",
    "Bangla": "Bangla", "Assamese": "Assamese", "Kannada": "Kannada",
    "Marathi": "Marathi", "Tamil": "Tamil", "Telugu": "Telugu", "Dogri": "Dogri"
}

# ===============================================================
# SCHEMA (shortened to prevent token overflow)
# ===============================================================
JSON_KEYS = [
    "chief_complaint", "symptom_description", "past_medical_history",
    "assessment_primary_diagnosis", "management_plan", "follow_up_plan"
]
JSON_TEMPLATE = {k: None for k in JSON_KEYS}

# ===============================================================
# HELPERS
# ===============================================================
def tprint(msg): print(f"[{time.strftime('%H:%M:%S')}] {msg}", flush=True)

def safe_read_jsonl(path):
    rows = []
    with open(path, "r", encoding="utf-8") as f:
        for line in f:
            line = line.strip()
            if not line: continue
            try: rows.append(json.loads(line))
            except json.JSONDecodeError: continue
    return rows

def join_dialogue(rows):
    """Combine dialogue text from jsonl rows."""
    return " ".join(
        r.get("dialogue", "") if isinstance(r, dict) else str(r)
        for r in rows
    )

def clip_tokens(tok, text, max_tokens):
    ids = tok.encode(text, add_special_tokens=False)
    if len(ids) <= max_tokens:
        return text
    ids = ids[-max_tokens:]
    return tok.decode(ids, skip_special_tokens=True)

# ===============================================================
# PROMPTS
# ===============================================================
def build_summary_prompt(dialogue):
    return (
        "You are a clinical summarization assistant.\n"
        "Summarize the following doctor‚Äìpatient dialogue clearly and concisely in English.\n"
        "Focus on diagnosis, symptoms, and management.\n"
        "Return only the summary text.\n\n"
        f"### Dialogue:\n{dialogue}\n\n### Summary:"
    )

def build_json_prompt(dialogue):
    keys = ", ".join(JSON_KEYS)
    return (
        "Extract structured clinical details from the dialogue below.\n"
        f"Return only valid JSON with the following fields: {keys}.\n"
        "Use null when not mentioned.\n\n"
        f"### Dialogue:\n{dialogue}\n\n### JSON:"
    )

def build_qna_prompt(question, lang):
    return (
        f"You are a medical assistant answering patient questions in {lang}.\n"
        "Answer clearly and concisely.\n"
        f"### Question: {question}\n### Answer:"
    )

# ===============================================================
# GENERATION HELPERS
# ===============================================================
def generate_text(model, tok, prompt, max_new_tokens, temperature=TEMPERATURE, top_p=TOP_P):
    inputs = tok(prompt, return_tensors="pt", truncation=True, max_length=MODEL_MAX).to(model.device)
    with torch.no_grad():
        out = model.generate(
            **inputs,
            max_new_tokens=max_new_tokens,
            temperature=temperature,
            top_p=top_p,
            do_sample=True,
            repetition_penalty=REP_PENALTY,
            pad_token_id=tok.eos_token_id,
            eos_token_id=tok.eos_token_id,
        )
    return tok.decode(out[0], skip_special_tokens=True).strip()

def try_json_parse(txt):
    txt = txt.strip()
    if "```" in txt:
        for part in txt.split("```"):
            part = part.strip()
            if part.lower().startswith("json"):
                part = part[4:].strip()
            try:
                return json.loads(part)
            except: pass
    try:
        return json.loads(txt)
    except:
        start, end = txt.find("{"), txt.rfind("}")
        if start != -1 and end != -1:
            try:
                return json.loads(txt[start:end+1])
            except:
                pass
    return None

def generate_json(model, tok, prompt, max_new_tokens):
    out = generate_text(model, tok, prompt, max_new_tokens)
    data = try_json_parse(out)
    if isinstance(data, dict) and len(data.keys()) >= 2:
        return data
    # Retry with stronger constraint
    strict = prompt + "\nReturn ONLY valid JSON."
    out2 = generate_text(model, tok, strict, max_new_tokens)
    data2 = try_json_parse(out2)
    return data2 if isinstance(data2, dict) else JSON_TEMPLATE

def save_json(path, obj):
    path.parent.mkdir(parents=True, exist_ok=True)
    with open(path, "w", encoding="utf-8") as f:
        json.dump(obj, f, ensure_ascii=False, indent=2)

def save_text(path, txt):
    path.parent.mkdir(parents=True, exist_ok=True)
    with open(path, "w", encoding="utf-8") as f:
        f.write(txt.strip() + "\n")

# ===============================================================
# MAIN
# ===============================================================
def main():
    torch.set_grad_enabled(False)
    random.seed(SEED)

    tprint("üöÄ Loading fine-tuned model (LoRA + 4bit)...")
    bnb_cfg = BitsAndBytesConfig(
        load_in_4bit=True,
        bnb_4bit_compute_dtype=torch.float16,
        bnb_4bit_quant_type="nf4"
    )

    tokenizer = AutoTokenizer.from_pretrained(ADAPTER_DIR)
    if tokenizer.pad_token is None:
        tokenizer.pad_token = tokenizer.eos_token

    base = AutoModelForCausalLM.from_pretrained(
        BASE_MODEL, device_map="auto",
        quantization_config=bnb_cfg,
        torch_dtype=torch.float16
    )
    model = PeftModel.from_pretrained(base, ADAPTER_DIR)
    model.eval()

    langs = [p for p in Path(TEST_DIR).iterdir() if p.is_dir()]
    tprint(f"üåç Found {len(langs)} languages: {[p.name for p in langs]}")

    for lang_dir in langs:
        lang = lang_dir.name
        hint = LANG_HINTS.get(lang, "the same language")
        out_lang = Path(OUTPUT_DIR) / lang
        dlg_dir = lang_dir / "Dialogues"
        qna_dir = lang_dir / "QnA"

        tprint(f"ü©∫ Processing language: {lang}")

        # === Summaries ===
        if dlg_dir.exists():
            for dlg_file in sorted(dlg_dir.glob("*.jsonl")):
                rows = safe_read_jsonl(dlg_file)
                dialogue = clip_tokens(tokenizer, join_dialogue(rows), INPUT_LIMIT)

                text_prompt = build_summary_prompt(dialogue)
                json_prompt = build_json_prompt(dialogue)

                text_out = generate_text(model, tokenizer, text_prompt, MAX_NEW_TOKENS_SUMMARY)
                json_out = generate_json(model, tokenizer, json_prompt, MAX_NEW_TOKENS_JSON)

                save_text(out_lang / "Summary_Text" / f"{dlg_file.stem}_summary.txt", text_out)
                save_json(out_lang / "Summary_Json" / f"{dlg_file.stem}_summary.json", json_out)

        # === QnA ===
        if qna_dir.exists():
            for qna_file in sorted(qna_dir.glob("*.json")):
                data = json.load(open(qna_file, encoding="utf-8"))
                out_qs = {"questions": []}
                for qa in data.get("questions", []):
                    q = qa.get("question", "").strip()
                    if not q: continue
                    prompt = build_qna_prompt(q, hint)
                    ans = generate_text(model, tokenizer, prompt, MAX_NEW_TOKENS_QNA)
                    out_qs["questions"].append({"question": q, "answer": ans})
                save_json(out_lang / "QnA" / f"{qna_file.stem}_answers.json", out_qs)

    tprint(f"‚úÖ All outputs saved to {OUTPUT_DIR}")

# ===============================================================
if __name__ == "__main__":
    main()
